// Generated by gencpp from file blobfinder/BlobInfo3D.msg
// DO NOT EDIT!


#ifndef BLOBFINDER_MESSAGE_BLOBINFO3D_H
#define BLOBFINDER_MESSAGE_BLOBINFO3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <blobfinder/BlobInfo.h>
#include <geometry_msgs/Point32.h>

namespace blobfinder
{
template <class ContainerAllocator>
struct BlobInfo3D_
{
  typedef BlobInfo3D_<ContainerAllocator> Type;

  BlobInfo3D_()
    : blob()
    , position()
    , have_pos(false)  {
    }
  BlobInfo3D_(const ContainerAllocator& _alloc)
    : blob(_alloc)
    , position(_alloc)
    , have_pos(false)  {
  (void)_alloc;
    }



   typedef  ::blobfinder::BlobInfo_<ContainerAllocator>  _blob_type;
  _blob_type blob;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint8_t _have_pos_type;
  _have_pos_type have_pos;




  typedef boost::shared_ptr< ::blobfinder::BlobInfo3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blobfinder::BlobInfo3D_<ContainerAllocator> const> ConstPtr;

}; // struct BlobInfo3D_

typedef ::blobfinder::BlobInfo3D_<std::allocator<void> > BlobInfo3D;

typedef boost::shared_ptr< ::blobfinder::BlobInfo3D > BlobInfo3DPtr;
typedef boost::shared_ptr< ::blobfinder::BlobInfo3D const> BlobInfo3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blobfinder::BlobInfo3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blobfinder::BlobInfo3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blobfinder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'blobfinder': ['/home/schleppy/project_files/Schlepbot-E90/catkin_ws_new/src/blobfinder/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blobfinder::BlobInfo3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blobfinder::BlobInfo3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blobfinder::BlobInfo3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3d0e6635e357b0e6fe0e98d803150c5";
  }

  static const char* value(const ::blobfinder::BlobInfo3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3d0e6635e357b0eULL;
  static const uint64_t static_value2 = 0x6fe0e98d803150c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blobfinder/BlobInfo3D";
  }

  static const char* value(const ::blobfinder::BlobInfo3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BlobInfo blob\n\
geometry_msgs/Point32 position\n\
bool have_pos\n\
\n\
\n\
================================================================================\n\
MSG: blobfinder/BlobInfo\n\
float32 cx\n\
float32 cy\n\
float32 area\n\
float32 ux\n\
float32 uy\n\
float32 vx\n\
float32 vy\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::blobfinder::BlobInfo3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blob);
      stream.next(m.position);
      stream.next(m.have_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BlobInfo3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blobfinder::BlobInfo3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blobfinder::BlobInfo3D_<ContainerAllocator>& v)
  {
    s << indent << "blob: ";
    s << std::endl;
    Printer< ::blobfinder::BlobInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.blob);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "have_pos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.have_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLOBFINDER_MESSAGE_BLOBINFO3D_H
