// Generated by gencpp from file blobfinder/BlobInfo.msg
// DO NOT EDIT!


#ifndef BLOBFINDER_MESSAGE_BLOBINFO_H
#define BLOBFINDER_MESSAGE_BLOBINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blobfinder
{
template <class ContainerAllocator>
struct BlobInfo_
{
  typedef BlobInfo_<ContainerAllocator> Type;

  BlobInfo_()
    : cx(0.0)
    , cy(0.0)
    , area(0.0)
    , ux(0.0)
    , uy(0.0)
    , vx(0.0)
    , vy(0.0)  {
    }
  BlobInfo_(const ContainerAllocator& _alloc)
    : cx(0.0)
    , cy(0.0)
    , area(0.0)
    , ux(0.0)
    , uy(0.0)
    , vx(0.0)
    , vy(0.0)  {
  (void)_alloc;
    }



   typedef float _cx_type;
  _cx_type cx;

   typedef float _cy_type;
  _cy_type cy;

   typedef float _area_type;
  _area_type area;

   typedef float _ux_type;
  _ux_type ux;

   typedef float _uy_type;
  _uy_type uy;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;




  typedef boost::shared_ptr< ::blobfinder::BlobInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blobfinder::BlobInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BlobInfo_

typedef ::blobfinder::BlobInfo_<std::allocator<void> > BlobInfo;

typedef boost::shared_ptr< ::blobfinder::BlobInfo > BlobInfoPtr;
typedef boost::shared_ptr< ::blobfinder::BlobInfo const> BlobInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blobfinder::BlobInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blobfinder::BlobInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blobfinder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'blobfinder': ['/home/schleppy/project_files/Schlepbot-E90/catkin_ws_new/src/blobfinder/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blobfinder::BlobInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blobfinder::BlobInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blobfinder::BlobInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blobfinder::BlobInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blobfinder::BlobInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blobfinder::BlobInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blobfinder::BlobInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fdbf41c5b84fc9a6e64c710c8878cb4";
  }

  static const char* value(const ::blobfinder::BlobInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fdbf41c5b84fc9aULL;
  static const uint64_t static_value2 = 0x6e64c710c8878cb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::blobfinder::BlobInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blobfinder/BlobInfo";
  }

  static const char* value(const ::blobfinder::BlobInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blobfinder::BlobInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 cx\n\
float32 cy\n\
float32 area\n\
float32 ux\n\
float32 uy\n\
float32 vx\n\
float32 vy\n\
";
  }

  static const char* value(const ::blobfinder::BlobInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blobfinder::BlobInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.area);
      stream.next(m.ux);
      stream.next(m.uy);
      stream.next(m.vx);
      stream.next(m.vy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BlobInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blobfinder::BlobInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blobfinder::BlobInfo_<ContainerAllocator>& v)
  {
    s << indent << "cx: ";
    Printer<float>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<float>::stream(s, indent + "  ", v.cy);
    s << indent << "area: ";
    Printer<float>::stream(s, indent + "  ", v.area);
    s << indent << "ux: ";
    Printer<float>::stream(s, indent + "  ", v.ux);
    s << indent << "uy: ";
    Printer<float>::stream(s, indent + "  ", v.uy);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLOBFINDER_MESSAGE_BLOBINFO_H
